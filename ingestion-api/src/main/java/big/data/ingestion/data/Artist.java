/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package big.data.ingestion.data;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Artist extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6989419638346006526L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Artist\",\"namespace\":\"big.data.ingestion.data\",\"fields\":[{\"name\":\"artist_name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"artist_uri\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"genres\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"popularity\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Artist> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Artist> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Artist> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Artist> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Artist> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Artist to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Artist from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Artist instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Artist fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String artist_name;
  private java.lang.String artist_uri;
  private java.util.List<java.lang.String> genres;
  private int popularity;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Artist() {}

  /**
   * All-args constructor.
   * @param artist_name The new value for artist_name
   * @param artist_uri The new value for artist_uri
   * @param genres The new value for genres
   * @param popularity The new value for popularity
   */
  public Artist(java.lang.String artist_name, java.lang.String artist_uri, java.util.List<java.lang.String> genres, java.lang.Integer popularity) {
    this.artist_name = artist_name;
    this.artist_uri = artist_uri;
    this.genres = genres;
    this.popularity = popularity;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return artist_name;
    case 1: return artist_uri;
    case 2: return genres;
    case 3: return popularity;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: artist_name = value$ != null ? value$.toString() : null; break;
    case 1: artist_uri = value$ != null ? value$.toString() : null; break;
    case 2: genres = (java.util.List<java.lang.String>)value$; break;
    case 3: popularity = (java.lang.Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'artist_name' field.
   * @return The value of the 'artist_name' field.
   */
  public java.lang.String getArtistName() {
    return artist_name;
  }


  /**
   * Sets the value of the 'artist_name' field.
   * @param value the value to set.
   */
  public void setArtistName(java.lang.String value) {
    this.artist_name = value;
  }

  /**
   * Gets the value of the 'artist_uri' field.
   * @return The value of the 'artist_uri' field.
   */
  public java.lang.String getArtistUri() {
    return artist_uri;
  }


  /**
   * Sets the value of the 'artist_uri' field.
   * @param value the value to set.
   */
  public void setArtistUri(java.lang.String value) {
    this.artist_uri = value;
  }

  /**
   * Gets the value of the 'genres' field.
   * @return The value of the 'genres' field.
   */
  public java.util.List<java.lang.String> getGenres() {
    return genres;
  }


  /**
   * Sets the value of the 'genres' field.
   * @param value the value to set.
   */
  public void setGenres(java.util.List<java.lang.String> value) {
    this.genres = value;
  }

  /**
   * Gets the value of the 'popularity' field.
   * @return The value of the 'popularity' field.
   */
  public int getPopularity() {
    return popularity;
  }


  /**
   * Sets the value of the 'popularity' field.
   * @param value the value to set.
   */
  public void setPopularity(int value) {
    this.popularity = value;
  }

  /**
   * Creates a new Artist RecordBuilder.
   * @return A new Artist RecordBuilder
   */
  public static big.data.ingestion.data.Artist.Builder newBuilder() {
    return new big.data.ingestion.data.Artist.Builder();
  }

  /**
   * Creates a new Artist RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Artist RecordBuilder
   */
  public static big.data.ingestion.data.Artist.Builder newBuilder(big.data.ingestion.data.Artist.Builder other) {
    if (other == null) {
      return new big.data.ingestion.data.Artist.Builder();
    } else {
      return new big.data.ingestion.data.Artist.Builder(other);
    }
  }

  /**
   * Creates a new Artist RecordBuilder by copying an existing Artist instance.
   * @param other The existing instance to copy.
   * @return A new Artist RecordBuilder
   */
  public static big.data.ingestion.data.Artist.Builder newBuilder(big.data.ingestion.data.Artist other) {
    if (other == null) {
      return new big.data.ingestion.data.Artist.Builder();
    } else {
      return new big.data.ingestion.data.Artist.Builder(other);
    }
  }

  /**
   * RecordBuilder for Artist instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Artist>
    implements org.apache.avro.data.RecordBuilder<Artist> {

    private java.lang.String artist_name;
    private java.lang.String artist_uri;
    private java.util.List<java.lang.String> genres;
    private int popularity;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(big.data.ingestion.data.Artist.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.artist_name)) {
        this.artist_name = data().deepCopy(fields()[0].schema(), other.artist_name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.artist_uri)) {
        this.artist_uri = data().deepCopy(fields()[1].schema(), other.artist_uri);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.genres)) {
        this.genres = data().deepCopy(fields()[2].schema(), other.genres);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.popularity)) {
        this.popularity = data().deepCopy(fields()[3].schema(), other.popularity);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
    }

    /**
     * Creates a Builder by copying an existing Artist instance
     * @param other The existing instance to copy.
     */
    private Builder(big.data.ingestion.data.Artist other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.artist_name)) {
        this.artist_name = data().deepCopy(fields()[0].schema(), other.artist_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.artist_uri)) {
        this.artist_uri = data().deepCopy(fields()[1].schema(), other.artist_uri);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.genres)) {
        this.genres = data().deepCopy(fields()[2].schema(), other.genres);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.popularity)) {
        this.popularity = data().deepCopy(fields()[3].schema(), other.popularity);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'artist_name' field.
      * @return The value.
      */
    public java.lang.String getArtistName() {
      return artist_name;
    }


    /**
      * Sets the value of the 'artist_name' field.
      * @param value The value of 'artist_name'.
      * @return This builder.
      */
    public big.data.ingestion.data.Artist.Builder setArtistName(java.lang.String value) {
      validate(fields()[0], value);
      this.artist_name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_name' field has been set.
      * @return True if the 'artist_name' field has been set, false otherwise.
      */
    public boolean hasArtistName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'artist_name' field.
      * @return This builder.
      */
    public big.data.ingestion.data.Artist.Builder clearArtistName() {
      artist_name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_uri' field.
      * @return The value.
      */
    public java.lang.String getArtistUri() {
      return artist_uri;
    }


    /**
      * Sets the value of the 'artist_uri' field.
      * @param value The value of 'artist_uri'.
      * @return This builder.
      */
    public big.data.ingestion.data.Artist.Builder setArtistUri(java.lang.String value) {
      validate(fields()[1], value);
      this.artist_uri = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_uri' field has been set.
      * @return True if the 'artist_uri' field has been set, false otherwise.
      */
    public boolean hasArtistUri() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'artist_uri' field.
      * @return This builder.
      */
    public big.data.ingestion.data.Artist.Builder clearArtistUri() {
      artist_uri = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'genres' field.
      * @return The value.
      */
    public java.util.List<java.lang.String> getGenres() {
      return genres;
    }


    /**
      * Sets the value of the 'genres' field.
      * @param value The value of 'genres'.
      * @return This builder.
      */
    public big.data.ingestion.data.Artist.Builder setGenres(java.util.List<java.lang.String> value) {
      validate(fields()[2], value);
      this.genres = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'genres' field has been set.
      * @return True if the 'genres' field has been set, false otherwise.
      */
    public boolean hasGenres() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'genres' field.
      * @return This builder.
      */
    public big.data.ingestion.data.Artist.Builder clearGenres() {
      genres = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'popularity' field.
      * @return The value.
      */
    public int getPopularity() {
      return popularity;
    }


    /**
      * Sets the value of the 'popularity' field.
      * @param value The value of 'popularity'.
      * @return This builder.
      */
    public big.data.ingestion.data.Artist.Builder setPopularity(int value) {
      validate(fields()[3], value);
      this.popularity = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'popularity' field has been set.
      * @return True if the 'popularity' field has been set, false otherwise.
      */
    public boolean hasPopularity() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'popularity' field.
      * @return This builder.
      */
    public big.data.ingestion.data.Artist.Builder clearPopularity() {
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Artist build() {
      try {
        Artist record = new Artist();
        record.artist_name = fieldSetFlags()[0] ? this.artist_name : (java.lang.String) defaultValue(fields()[0]);
        record.artist_uri = fieldSetFlags()[1] ? this.artist_uri : (java.lang.String) defaultValue(fields()[1]);
        record.genres = fieldSetFlags()[2] ? this.genres : (java.util.List<java.lang.String>) defaultValue(fields()[2]);
        record.popularity = fieldSetFlags()[3] ? this.popularity : (java.lang.Integer) defaultValue(fields()[3]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Artist>
    WRITER$ = (org.apache.avro.io.DatumWriter<Artist>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Artist>
    READER$ = (org.apache.avro.io.DatumReader<Artist>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.artist_name);

    out.writeString(this.artist_uri);

    long size0 = this.genres.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.String e0: this.genres) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeInt(this.popularity);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.artist_name = in.readString();

      this.artist_uri = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<java.lang.String> a0 = this.genres;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("genres").schema());
        this.genres = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString();
          a0.add(e0);
        }
      }

      this.popularity = in.readInt();

    } else {
      for (int i = 0; i < 4; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.artist_name = in.readString();
          break;

        case 1:
          this.artist_uri = in.readString();
          break;

        case 2:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.String> a0 = this.genres;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.String>((int)size0, SCHEMA$.getField("genres").schema());
            this.genres = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.String> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.String>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.String e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString();
              a0.add(e0);
            }
          }
          break;

        case 3:
          this.popularity = in.readInt();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










